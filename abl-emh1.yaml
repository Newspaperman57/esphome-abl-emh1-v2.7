substitutions:
  name: abl_emh1
  device_description: "Monitor and configure ABL eMH1 Charger via RS485/Modbus-ASCII"
  external_components_source: https://github.com/jrv/esphome-abl-emh1
  tx_pin: "17"
  rx_pin: "16"
  flow_control_pin: "5"

esphome:
  name: ${name}
  comment: ${device_description}
  friendly_name: ABL eMH1
  project:
    name: "jrv.esphome-abl-emh1"
    version: 0.0.1

esp32:
  board: esp32dev

external_components:
  source:
    type: git
    url: ${external_components_source}
    ref: main
  refresh: 0s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
  - platform: esphome
    password: !secret ota_password

logger:
  level: DEBUG

api:
  encryption:
    key: !secret api_key

uart:
  id: uart_2
  baud_rate: 38400
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}
  parity: EVEN

emh1_modbus:
    uart_id: uart_2
    flow_control_pin: ${flow_control_pin}
    id: modbus0

abl_emh1:
  emh1_modbus_id: modbus0
  update_interval: 5s

preferences:
  flash_write_interval: 5min

sensor:
  - platform: uptime
    name: Uptime Sensor
    id: abl_uptime
    update_interval: 15s
  - platform: abl_emh1
    mode:
      name: "mode"
      state_class: "measurement"
      accuracy_decimals: 0
      id: mode
    max_current:
      name: "Max current"
      state_class: "measurement"
      id: max_current
    charging_enabled:
      name: "Charging Enabled"
      state_class: "measurement"
      id: charging_enabled
    current:
      name: "Current-sensor"
      state_class: "measurement"
      id: current


number:
  - platform: template
    name: "Current"
    id: set_current
    icon: mdi:arrow-oscillating
    min_value: 3
    max_value: 32
    step: 0.1
    optimistic: false
    lambda: 'return id(current).state;'
    update_interval: 5s
    set_action:
      lambda: |-
        ESP_LOGD("main", "Setting current = %f", x);
        id(modbus0)->set_current(x);

switch:
  - platform: template
    name: "Enable"
    id: enable_switch
    icon: "mdi:power"
    lambda: 'return id(charging_enabled).state;'
    turn_off_action:
      - lambda: |-
          ESP_LOGD("main", "Disabling charging");
          id(modbus0)->set_charging_enabled(false);
    turn_on_action:
      - lambda: |-
          ESP_LOGD("main", "Enabling charging");
          id(modbus0)->set_charging_enabled(true);

button:
  - platform: template
    name: Stop charging
    id: stop_charging
    on_press:
      then:
      - lambda: |-
          ESP_LOGD("main", "Stopping chargingsession");
          id(modbus0)->stop_charging();
